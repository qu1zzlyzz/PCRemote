import logging
import io
import os
import mss
import subprocess
import pyaudio
import wave
import sounddevice as sd
import numpy as np
import cv2
import time
import warnings
import requests
import locale
import random
import json
import speedtest
import shutil
import pyautogui
import ctypes
import tkinter as tk
import threading
import webbrowser
import asyncio
import ast
import importlib
from playsound import playsound
from pynput.keyboard import Controller, Key
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaPhoto, Message, User, Chat, BotCommand
import config
from config import TGID, TOKEN, CITY_ID, API_KEY
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters, ConversationHandler
from threading import Timer
from PIL import ImageGrab
from PIL import Image
from moviepy.editor import *
from datetime import datetime

def gradient_color(start_color, end_color, lines):
    start_rgb = start_color
    end_rgb = end_color
    steps = len(lines)
    r_step = (end_rgb[0] - start_rgb[0]) / steps
    g_step = (end_rgb[1] - start_rgb[1]) / steps
    b_step = (end_rgb[2] - start_rgb[2]) / steps

    colored_lines = []
    for i, line in enumerate(lines):
        r = int(start_rgb[0] + i * r_step)
        g = int(start_rgb[1] + i * g_step)
        b = int(start_rgb[2] + i * b_step)
        colored_line = f"\033[38;2;{r};{g};{b}m{line}\033[0m"
        colored_lines.append(colored_line)
    return "\n".join(colored_lines)

ascii_art = """
‚ñà‚ñà‚ñì‚ñà‚ñà‚ñà    ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÑ  ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà   ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñÑ ‚ñÑ‚ñà‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñì‚ñà‚ñà‚ñë  ‚ñà‚ñà  ‚ñí‚ñà‚ñà‚ñÄ ‚ñÄ‚ñà ‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí ‚ñì‚ñà   ‚ñÄ‚ñì‚ñà‚ñà‚ñí‚ñÄ‚ñà‚ñÄ ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí‚ñì  ‚ñà‚ñà‚ñí ‚ñì‚ñí ‚ñì‚ñà   ‚ñÄ
‚ñì‚ñà‚ñà‚ñë ‚ñà‚ñà‚ñì‚ñí ‚ñí‚ñì‚ñà    ‚ñÑ‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí ‚ñí‚ñà‚ñà‚ñà  ‚ñì‚ñà‚ñà    ‚ñì‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñë ‚ñí‚ñà‚ñà‚ñà  
‚ñí‚ñà‚ñà‚ñÑ‚ñà‚ñì‚ñí ‚ñí‚ñí‚ñí‚ñì‚ñì‚ñÑ ‚ñÑ‚ñà‚ñà‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ   ‚ñí‚ñì‚ñà  ‚ñÑ‚ñí‚ñà‚ñà    ‚ñí‚ñà‚ñà ‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë‚ñë ‚ñì‚ñà‚ñà‚ñì ‚ñë  ‚ñí‚ñì‚ñà  ‚ñÑ
‚ñí‚ñà‚ñà‚ñí ‚ñë  ‚ñë‚ñë‚ñí ‚ñì‚ñà‚ñà‚ñà‚ñÄ ‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñà‚ñà‚ñí   ‚ñë‚ñà‚ñà‚ñí‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë  ‚ñí‚ñà‚ñà‚ñí ‚ñë ‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà
‚ñí‚ñì‚ñí‚ñë ‚ñë  ‚ñë‚ñë‚ñë ‚ñë‚ñí ‚ñí  ‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë‚ñë‚ñë‚ñë ‚ñí‚ñë ‚ñë ‚ñí‚ñë   ‚ñë  ‚ñë‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë   ‚ñí ‚ñë‚ñë   ‚ñë‚ñë‚ñë ‚ñí‚ñë 
‚ñë‚ñí ‚ñë        ‚ñë  ‚ñí    ‚ñë‚ñí ‚ñë ‚ñí ‚ñë ‚ñë ‚ñë  ‚ñë  ‚ñë      ‚ñë  ‚ñë ‚ñí ‚ñí‚ñë     ‚ñë    ‚ñë ‚ñë ‚ñë  
‚ñë‚ñë        ‚ñë         ‚ñë‚ñë   ‚ñë     ‚ñë  ‚ñë      ‚ñë   ‚ñë ‚ñë ‚ñë ‚ñí    ‚ñë          ‚ñë  
        ‚ñë ‚ñë        ‚ñë     ‚ñë   ‚ñë         ‚ñë       ‚ñë ‚ñë           ‚ñë   ‚ñë  """

lines = ascii_art.split('\n')
transition_start = len(lines) - 3
colored_ascii_art = gradient_color((0, 0, 255), (255, 255, 255), lines[:transition_start])
colored_ascii_art += "\n" + "\n".join(f"\033[38;2;255;255;255m{line}\033[0m" for line in lines[transition_start:])
terminal_width = shutil.get_terminal_size().columns
max_line_width = max(len(line) for line in lines)
padding = (terminal_width - max_line_width) // 2
centered_ascii_art = "\n".join(f"{' ' * padding}{line}" for line in colored_ascii_art.split('\n'))

user_timers = {}
path_dict = {}
current_paths = {}
app_timers = {}

warnings.filterwarnings("ignore", category=UserWarning)
output_folder = "output"

keyboard_controller = Controller()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.WARNING
)
logger = logging.getLogger(__name__)
custom_actions_file = 'custom_actions.json'

locale.setlocale(locale.LC_TIME, 'ru_RU')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ENTER_URL, RECORD_MICROPHONE, RECORD_SCREEN = range(3)
ENTER_ACTION_NAME, ENTER_APP_PATH = range(2)
BROWSING, = range(1)
ASK_KEY = range(1)
ENTER_TEXT = 0

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
if os.path.exists(custom_actions_file):
    with open(custom_actions_file, 'r') as file:
        custom_actions = json.load(file)
else:
    custom_actions = {}

def translate_day_of_week(day):
    translations = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "–°—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
        "Saturday": "–°—É–±–±–æ—Ç–∞",
        "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "–í—Ç–æ—Ä–Ω–∏–∫": "–í—Ç–æ—Ä–Ω–∏–∫",
        "–°—Ä–µ–¥–∞": "–°—Ä–µ–¥–∞",
        "–ß–µ—Ç–≤–µ—Ä–≥": "–ß–µ—Ç–≤–µ—Ä–≥",
        "–ü—è—Ç–Ω–∏—Ü–∞": "–ü—è—Ç–Ω–∏—Ü–∞",
        "–°—É–±–±–æ—Ç–∞": "–°—É–±–±–æ—Ç–∞",
        "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    return translations.get(day, day)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
last_weather_data = {
    "temperature": "N/A",
    "humidity": "N/A",
    "weather_condition": "N/A",
    "emoji": "N/A"
}
last_currency_data = {
    "usd_rate": "N/A",
    "eur_rate": "N/A",
    "lira_rate": "N/A"
}

def play_startup_sound():
    if config.STARTUP_SOUND_ENABLED:
        resources_path = os.path.join(os.getcwd(), 'resources')
        sound_file_path = os.path.join(resources_path, 'startup.mp3')
        if os.path.exists(sound_file_path):
            playsound(sound_file_path)
        else:
            print("–ó–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    if user_id in TGID:
        await send_start_message(update, context)
    else:
        await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", parse_mode='MARKDOWN')

async def send_start_message(update: Update, context: CallbackContext) -> None:
    global last_weather_data, last_currency_data

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    now = datetime.now()
    day_of_week = now.strftime("%A")
    month_names = ["—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"]
    date = f"{now.day} {month_names[now.month - 1]}"
    time = now.strftime("%H:%M")
    weather_url = f"http://api.openweathermap.org/data/2.5/weather?id={CITY_ID}&appid={API_KEY}&units=metric&lang=ru"

    try:
        response = requests.get(weather_url)
        response.raise_for_status()
        weather_data = response.json()

        if "main" in weather_data:
            temperature = weather_data["main"]["temp"]
            humidity = weather_data["main"]["humidity"]
            weather_condition = weather_data["weather"][0]["description"]
            emoji = "‚òÄÔ∏è"
            wind_speed = weather_data["wind"]["speed"]

            if "–¥–æ–∂–¥—å" in weather_condition:
                emoji = "üåßÔ∏è"
            elif "–æ–±–ª–∞—á–Ω–æ" in weather_condition:
                emoji = "‚òÅÔ∏è"
            elif "—Å–Ω–µ–≥" in weather_condition:
                emoji = "‚ùÑÔ∏è"
            
            last_weather_data = {
                "temperature": temperature,
                "humidity": humidity,
                "weather_condition": weather_condition,
                "emoji": emoji,
                "wind_speed": wind_speed
            }
        else:
            raise ValueError("Invalid weather data")
    except (requests.RequestException, ValueError):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
        temperature = last_weather_data.get("temperature", "N/A")
        humidity = last_weather_data.get("humidity", "N/A")
        weather_condition = last_weather_data.get("weather_condition", "N/A")
        emoji = last_weather_data.get("emoji", "‚ùì")
        wind_speed = last_weather_data.get("wind_speed", "N/A")

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    currency_url = "https://www.cbr-xml-daily.ru/daily_json.js"
    try:
        currency_response = requests.get(currency_url)
        currency_response.raise_for_status()
        currency_data = currency_response.json()

        if "Valute" in currency_data:
            try:
                usd_rate = currency_data["Valute"]["USD"]["Value"]
                usd_rate = "{:.2f}".format(usd_rate)
            except KeyError:
                usd_rate = "N/A"

            try:
                eur_rate = currency_data["Valute"]["EUR"]["Value"]
                eur_rate = "{:.2f}".format(eur_rate)
            except KeyError:
                eur_rate = "N/A"

            try:
                lira_rate = currency_data["Valute"]["TRY"]["Value"] / 10
                lira_rate = "{:.2f}".format(lira_rate)
            except KeyError:
                lira_rate = "N/A"
            
            last_currency_data = {
                "usd_rate": usd_rate,
                "eur_rate": eur_rate,
                "lira_rate": lira_rate
            }
        else:
            raise ValueError("Invalid currency data")
    except (requests.RequestException, ValueError):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
        usd_rate = last_currency_data.get("usd_rate", "N/A")
        eur_rate = last_currency_data.get("eur_rate", "N/A")
        lira_rate = last_currency_data.get("lira_rate", "N/A")

    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ø–æ–≥–æ–¥—ã
    weather_images_path = "resources/weather"
    weather_images = [f for f in os.listdir(weather_images_path) if f.endswith('.jpg')]
    random_image = random.choice(weather_images)
    image_path = os.path.join(weather_images_path, random_image)

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    start_message = (
        f"<b>üñ•Ô∏è –ú—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã, —Å—ç—Ä!</b>\n\n"
        f"‚Ä¢  –°–µ–≥–æ–¥–Ω—è <b>{day_of_week}, {date}</b>.\n"
        f"‚Ä¢  –í—Ä–µ–º—è <b>{time}</b>\n"
        f"‚Ä¢  –ó–∞ –æ–∫–Ω–æ–º <b>{humidity}%</b> üí¶, <b>{temperature}¬∞C</b>, {emoji} <b>{weather_condition}</b>\n\n"
    )
    start_message += (
        f"<b>üíµ –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞:</b> {usd_rate} —Ä—É–±.\n"
        f"<b>üí∂ –ö—É—Ä—Å –µ–≤—Ä–æ:</b> {eur_rate} —Ä—É–±.\n"
        f"<b>üí¥ –ö—É—Ä—Å –ª–∏—Ä—ã:</b> {lira_rate} —Ä—É–±."
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = [
        [
            InlineKeyboardButton("‚ö†Ô∏è –í—ã–∫–ª—é—á–∏—Ç—å", callback_data='shutdown'),
            InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data='reboot'),
        ],
        [
            InlineKeyboardButton("üí§ –°–ø—è—â–∏–π —Ä–µ–∂–∏–º", callback_data='sleep_computer'),
            InlineKeyboardButton("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='lock'),
        ],
        [
            InlineKeyboardButton("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç", callback_data='screenshot'),
            InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç", callback_data='input_text'),
        ],
        [
            InlineKeyboardButton("üåê –°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞", callback_data='check_speed'),
            InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", callback_data='open_url'),
        ],
        [
            InlineKeyboardButton("üîä –ü–æ–≤—ã—Å–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å", callback_data='volume_up'),
            InlineKeyboardButton("üîâ –ü–æ–Ω–∏–∑–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å", callback_data='volume_down'),
        ],
        [
            InlineKeyboardButton("üéôÔ∏è –ó–∞–ø–∏—Å—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞", callback_data='record_microphone'),
            InlineKeyboardButton("üìπ –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞", callback_data='record_screen'),
        ],
        [
            InlineKeyboardButton("‚å®Ô∏è –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É", callback_data='ask_key'),
            InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='clear_cart'),
        ],
        [
            InlineKeyboardButton("‚ú® –ú–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è", callback_data='custom_actions'),
            InlineKeyboardButton("üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤", callback_data='start_browsing')
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')
        ],
    ]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query and update.callback_query.message:
        message_id = update.callback_query.message.message_id
        chat_id = update.callback_query.message.chat_id

        if update.callback_query.message.photo:
            await context.bot.edit_message_media(
                media=InputMediaPhoto(media=open(image_path, 'rb')),
                chat_id=chat_id,
                message_id=message_id,
                caption=start_message,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return

    sent_message = await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=open(image_path, 'rb'),
        caption=start_message,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

    context.user_data['start_message_id'] = sent_message.message_id

def update_config_value(file_path, variable_name, new_value):
    with open(file_path, 'r', encoding='utf-8') as file:
        tree = ast.parse(file.read(), filename=file_path)

    for node in ast.walk(tree):
        if isinstance(node, ast.Assign) and len(node.targets) == 1:
            target = node.targets[0]
            if isinstance(target, ast.Name) and target.id == variable_name:
                node.value = ast.parse(repr(new_value)).body[0].value

    with open(file_path, 'w', encoding='utf-8') as file:
        file.write(ast.unparse(tree))

async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    action = query.data
    user_data = context.user_data

    if action == 'custom_actions':
        custom_action_names = list(custom_actions.keys())
        keyboard = []
        for i in range(0, len(custom_action_names), 2):
            row = [
                InlineKeyboardButton(custom_action_names[i], callback_data=f'run_custom_action:{custom_action_names[i]}')
            ]
            if i + 1 < len(custom_action_names):
                row.append(InlineKeyboardButton(custom_action_names[i + 1], callback_data=f'run_custom_action:{custom_action_names[i + 1]}'))
            keyboard.append(row)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_start')])
        reply_markup = InlineKeyboardMarkup(keyboard)

        if query.message and query.message.photo:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text='*‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*',
                reply_markup=reply_markup,
                parse_mode='MARKDOWN'
            )
        else:
            if query.message and query.message.text:
                await query.message.edit_text('*‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*', reply_markup=reply_markup, parse_mode='MARKDOWN')
            elif query.message and query.message.caption:
                await query.message.edit_caption('*‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*', reply_markup=reply_markup, parse_mode='MARKDOWN')
            else:
                await query.edit_message_text('*‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*', reply_markup=reply_markup, parse_mode='MARKDOWN')

    elif action == 'settings':
        importlib.reload(config)
        soundon_keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫ –∑–∞–ø—É—Å–∫–∞", callback_data='disable_startup_sound')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_start')]
        ]
        sound_on = InlineKeyboardMarkup(soundon_keyboard) 

        soundoff_keyboard = [
            [InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫ –∑–∞–ø—É—Å–∫–∞", callback_data='enable_startup_sound')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_start')]
        ]
        sound_off = InlineKeyboardMarkup(soundoff_keyboard) 

        # –í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        current_markup = sound_on if config.STARTUP_SOUND_ENABLED else sound_off

        if query.message and query.message.photo:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text='*‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*',
                reply_markup=current_markup,
                parse_mode='MARKDOWN'
            )
        else:
            if query.message and query.message.text:
                await query.message.edit_text('*‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*', reply_markup=current_markup, parse_mode='MARKDOWN')
            elif query.message and query.message.caption:
                await query.message.edit_caption('*‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*', reply_markup=current_markup, parse_mode='MARKDOWN')
            else:
                await query.edit_message_text('*‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*', reply_markup=current_markup, parse_mode='MARKDOWN')

    elif action == 'disable_startup_sound':
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞ –∑–∞–ø—É—Å–∫–∞

        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_start')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard) 


        update_config_value('config.py', 'STARTUP_SOUND_ENABLED', False)
        await query.edit_message_text(text="üîá *–ó–≤—É–∫ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω.*", parse_mode='MARKDOWN', reply_markup=reply_markup)

    elif action == 'enable_startup_sound':
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞ –∑–∞–ø—É—Å–∫–∞

        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_start')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update_config_value('config.py', 'STARTUP_SOUND_ENABLED', True)
        await query.edit_message_text(text="üîá *–ó–≤—É–∫ –∑–∞–ø—É—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω.*", parse_mode='MARKDOWN', reply_markup=reply_markup)

    elif action.startswith('run_custom_action:'):
        action_name = action.split(':')[1]
        app_path = custom_actions.get(action_name)
        
        if app_path:
            subprocess.Popen(app_path, shell=True)
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥" –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='custom_actions')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            if query.message and query.message.text:
                await query.message.edit_text(f"*üöÄ –í—ã–ø–æ–ª–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ: {action_name}*", reply_markup=reply_markup, parse_mode='MARKDOWN')
            else:
                await query.message.reply_text(f"*üöÄ –í—ã–ø–æ–ª–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ: {action_name}*", reply_markup=reply_markup, parse_mode='MARKDOWN')
        else:
            await query.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—É—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", parse_mode='MARKDOWN')

    elif action == 'back_to_start':
        await send_start_message(update, context)
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –∏–ª–∏ —Ñ–∞–π–ª:", –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if query.message.text:
            await query.message.delete()
        elif query.message.caption:
            await query.message.delete_caption()
        else:
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)

    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫
    elif action == 'shutdown':
        await query.message.reply_text(text="*üí§ –í—ã–∫–ª—é—á–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä...*", parse_mode='MARKDOWN')
        subprocess.run(["shutdown", "/s", "/t", "0"])

    elif action == 'reboot':
        await query.message.reply_text(text="*üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä...*", parse_mode='MARKDOWN')
        subprocess.run(["shutdown", "/r", "/t", "0"])

    elif action == 'lock':
        await query.message.reply_text(text="*üîí –ë–ª–æ–∫–∏—Ä—É—é —ç–∫—Ä–∞–Ω...*", parse_mode='MARKDOWN')
        subprocess.run(["rundll32.exe", "user32.dll,LockWorkStation"])

    elif action == 'screenshot':
        await query.message.reply_text(text="*üì∏ –°–æ–∑–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...*", parse_mode='MARKDOWN')
        await screenshot(update, context)

    elif action == 'open_url':
        await query.message.reply_text(text="*‚õìÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:*", parse_mode='MARKDOWN')
        return ENTER_URL
    
    elif action == 'record_microphone':
        await query.message.reply_text("*üé§ –ó–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (–æ–∂–∏–¥–∞–π—Ç–µ 15—Å)*", parse_mode='MARKDOWN')
        await record_microphone(update, context)
        return RECORD_MICROPHONE
    
    elif action == 'record_screen':
        await query.message.reply_text(text="*üé• –ó–∞–ø–∏—Å—å —Å —ç–∫—Ä–∞–Ω–∞ (–æ–∂–∏–¥–∞–π—Ç–µ 15—Å)*", parse_mode='MARKDOWN')
        await record_screen(update, context)
        return RECORD_SCREEN
    
    elif action == 'check_speed':
        await query.message.reply_text(text="*‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–π–º—ë—Ç 20 —Å–µ–∫—É–Ω–¥...*", parse_mode='MARKDOWN')
        speed_result = check_speed()
        await query.message.reply_text(text=speed_result, parse_mode='MARKDOWN')

    elif action == 'clear_cart':
        await query.message.reply_text(text="*üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...*", parse_mode='MARKDOWN')
        await clear_cart(update, context)

    elif action == 'input_text':
        msg = await query.message.reply_text("*üñãÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:*", parse_mode='MARKDOWN')
        save_message_id(context, msg.message_id)
        return ENTER_TEXT
    
    elif action == 'ask_key':
        msg = await query.message.reply_text("*‚ú® –í–≤–µ–¥–∏—Ç–µ –∫–ª–∞–≤–∏—à—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å:*", parse_mode='MARKDOWN')
        context.user_data['ask_key_msg_id'] = msg.message_id
        context.user_data['ask_key_chat_id'] = msg.chat_id
        return ASK_KEY
    
    elif action == 'volume_up':
        await volume_up(update, context)

    elif action == 'volume_down':
        await volume_down(update, context)

    elif action == 'sleep_computer':
        sleep_computer(update, context)

    elif action.startswith('open_folder:'):
        folder_id = action.split(':')[1]
        new_path = path_dict.get(folder_id)
        if new_path:
            parent_path = os.path.dirname(new_path)
            current_paths[update.effective_user.id] = (new_path, parent_path)
            reply_markup = list_directory(new_path, user_data)
            await query.edit_message_text(text=f"üëÄ *–í—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ:* `{new_path}`", reply_markup=reply_markup, parse_mode='MARKDOWN')
        else:
            await query.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode='MARKDOWN')

    elif action.startswith('open_file:'):
        file_id = action.split(':')[1]
        file_path = path_dict.get(file_id)
        if file_path:
            await query.message.reply_document(document=open(file_path, 'rb'))
        else:
            await query.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode='MARKDOWN')

    elif action == 'access_denied':
        await query.message.reply_text("*‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∫ —ç—Ç–æ–º—É –∫–∞—Ç–∞–ª–æ–≥—É.*", parse_mode='MARKDOWN')
        
    elif action == 'folder_not_found':
        await query.message.reply_text("*‚õî –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.*", parse_mode='MARKDOWN')

    elif action == 'start_browsing':
        # –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        await start_browsing(update, context)

    elif action == 'go_up':
        current_path, parent_path = current_paths.get(update.effective_user.id, (None, None))
        if parent_path:
            reply_markup = list_directory(parent_path, user_data)
            await query.edit_message_text(text=f"üëÄ *–í—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ:* `{parent_path}`", reply_markup=reply_markup, parse_mode='MARKDOWN')
            current_paths[update.effective_user.id] = (parent_path, os.path.dirname(parent_path))
        else:
            await query.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ.", parse_mode='MARKDOWN')

    else:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        await query.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", parse_mode='MARKDOWN')

    return ConversationHandler.END

def list_directory(path, user_data):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ"""
    keyboard = []
    folders = []
    files = []

    try:

        for item in os.listdir(path):
            item_path = os.path.join(path, item)
            item_id = len(path_dict)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            path_dict[str(item_id)] = item_path
            if os.path.isdir(item_path):
                folders.append(InlineKeyboardButton(f"üìÅ {item}", callback_data=f'open_folder:{item_id}'))
            else:
                files.append(InlineKeyboardButton(f"üìÑ {item}", callback_data=f'open_file:{item_id}'))
    except PermissionError:
        return InlineKeyboardMarkup([[InlineKeyboardButton("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", callback_data='access_denied')]])
    except FileNotFoundError:
        return InlineKeyboardMarkup([[InlineKeyboardButton("‚õî –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", callback_data='folder_not_found')]])

    for i in range(0, len(folders), 2):
        keyboard.append(folders[i:i + 2])
    for i in range(0, len(files), 2):
        keyboard.append(files[i:i + 2])

    if path != '/':
        parent_folder_id = len(path_dict)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        path_dict[str(parent_folder_id)] = os.path.dirname(path)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ
        keyboard.append([InlineKeyboardButton("‚¨ÜÔ∏è –ù–∞–∑–∞–¥", callback_data=f'open_folder:{parent_folder_id}')])

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data='back_to_start')])

    return InlineKeyboardMarkup(keyboard)

async def start_browsing(update: Update, context: CallbackContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    query = update.callback_query
    await query.answer()
    
    root_path = 'C:\\'
    reply_markup = list_directory(root_path, context.user_data)
    
    sent_message = await query.message.reply_text(
        text="‚ú® *–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –∏–ª–∏ —Ñ–∞–π–ª:*",
        reply_markup=reply_markup,
        parse_mode='MARKDOWN'
    )

    if 'start_message_id' in context.user_data:
        await context.bot.delete_message(
            chat_id=query.message.chat_id,
            message_id=context.user_data['start_message_id']
        )

    context.user_data['last_sent_message_id'] = sent_message.message_id

    return BROWSING

def save_message_id(context: CallbackContext, message_id: int) -> None:
    if 'last_message_id' in context.user_data:
        context.user_data['previous_message_id'] = context.user_data['last_message_id']
    context.user_data['last_message_id'] = message_id

async def delete_last_two_messages(context: CallbackContext, chat_id: int) -> None:
    if 'last_message_id' in context.user_data:
        await context.bot.delete_message(chat_id=chat_id, message_id=context.user_data['last_message_id'])
        context.user_data.pop('last_message_id')
    if 'user_message_id' in context.user_data:
        await context.bot.delete_message(chat_id=chat_id, message_id=context.user_data['user_message_id'])
        context.user_data.pop('user_message_id')

def show_text_on_screen(text: str) -> None:
    try:
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ tkinter
        root = tk.Tk()
        root.attributes("-fullscreen", True)  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        root.attributes("-topmost", True)  # –æ–∫–Ω–æ –≤—Å–µ–≥–¥–∞ –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–ª–∞–Ω–µ

        # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω –Ω–∞ –≤—Å—é –ø–ª–æ—â–∞–¥—å –æ–∫–Ω–∞
        canvas = tk.Canvas(root, width=root.winfo_screenwidth(), height=root.winfo_screenheight(), bg="black")
        canvas.pack()

        # –†–∞–∑–º–µ—â–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É –æ–∫–Ω–∞
        text_label = tk.Label(canvas, text=text, fg="white", bg="black", font=("Helvetica", 24))
        text_label.place(relx=0.5, rely=0.5, anchor="center")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        root.after(5000, root.destroy)

        root.mainloop()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ: {str(e)}")

async def receive_text(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    context.user_data['user_message_id'] = update.message.message_id
    show_text_on_screen(text)
    await delete_last_two_messages(context, update.message.chat_id)
    await context.bot.send_message(chat_id=update.message.chat_id, text="‚úÖ *–¢–µ–∫—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω*", parse_mode='MARKDOWN')
    return ConversationHandler.END

def is_russian(text):
    return any('–∞' <= char <= '—è' or '–ê' <= char <= '–Ø' for char in text)

def get_key(key_str):
    key_str = key_str.strip().upper()
    if key_str == 'ENTER':
        return Key.enter
    elif key_str == 'ESC':
        return Key.esc
    elif key_str == 'SPACE':
        return Key.space
    elif key_str == 'BACKSPACE':
        return Key.backspace
    elif key_str == 'TAB':
        return Key.tab
    elif key_str == 'CAPSLOCK':
        return Key.caps_lock
    elif key_str == 'NUMLOCK':
        return Key.num_lock
    elif key_str == 'SCROLLLOCK':
        return Key.scroll_lock
    elif key_str == 'SHIFT':
        return Key.shift
    elif key_str == 'CTRL':
        return Key.ctrl
    elif key_str == 'ALT':
        return Key.alt
    elif key_str == 'PAUSE':
        return Key.pause
    elif key_str == 'INSERT':
        return Key.insert
    elif key_str == 'DELETE':
        return Key.delete
    elif key_str == 'HOME':
        return Key.home
    elif key_str == 'END':
        return Key.end
    elif key_str == 'PAGEUP':
        return Key.page_up
    elif key_str == 'PAGEDOWN':
        return Key.page_down
    elif key_str == 'LEFT':
        return Key.left
    elif key_str == 'RIGHT':
        return Key.right
    elif key_str == 'UP':
        return Key.up
    elif key_str == 'DOWN':
        return Key.down
    elif key_str.startswith('F') and key_str[1:].isdigit():
        try:
            return getattr(Key, key_str.lower())
        except AttributeError:
            return None
    elif len(key_str) == 1 and key_str.isalpha():
        return key_str
    else:
        return None

async def ask_key(update: Update, context: CallbackContext) -> int:
    key_input = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –∫–ª–∞–≤–∏—à–µ
    if is_russian(key_input):
        await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –í–≤–µ–¥–µ–Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–ª–∞–≤–∏—à–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–ª–∞–≤–∏—à—É –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ.", parse_mode='MARKDOWN')
        return ASK_KEY

    try:
        if '*' in key_input:
            key, times = key_input.split('*', 1)
            key = key.strip().upper()
            times = times.strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ times —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
            try:
                times = int(times)
                if times < 1:
                    raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            except ValueError as e:
                await update.message.reply_text(f"‚ùå *–û—à–∏–±–∫–∞:* {str(e)}", parse_mode='MARKDOWN')
                return ASK_KEY

            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏—à—É
            key = get_key(key)
            if key is None:
                await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –í–≤–µ–¥–µ–Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–ª–∞–≤–∏—à–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–ª–∞–≤–∏—à—É.", parse_mode='MARKDOWN')
                return ASK_KEY

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è
            for _ in range(times):
                if isinstance(key, Key):
                    keyboard_controller.press(key)
                    keyboard_controller.release(key)
                else:
                    keyboard_controller.press(key)
                    keyboard_controller.release(key)
        
        elif '+' in key_input:
            keys = key_input.split('+')
            keys = [key.strip().upper() for key in keys]

            pressed_keys = []
            for key in keys:
                key_obj = get_key(key)
                if key_obj is None:
                    await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –í–≤–µ–¥–µ–Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–ª–∞–≤–∏—à–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–ª–∞–≤–∏—à—É.", parse_mode='MARKDOWN')
                    return ASK_KEY
                else:
                    pressed_keys.append(key_obj)
                    keyboard_controller.press(key_obj)

            # –û—Ç–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–ª–∞–≤–∏—à–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            for key in reversed(pressed_keys):
                keyboard_controller.release(key)

        else:
            key = get_key(key_input)
            if key is None:
                await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –í–≤–µ–¥–µ–Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–ª–∞–≤–∏—à–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–ª–∞–≤–∏—à—É.", parse_mode='MARKDOWN')
                return ASK_KEY
            
            if isinstance(key, Key):
                keyboard_controller.press(key)
                keyboard_controller.release(key)
            else:
                keyboard_controller.press(key)
                keyboard_controller.release(key)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        await context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)
        await context.bot.delete_message(chat_id=context.user_data['ask_key_chat_id'], message_id=context.user_data['ask_key_msg_id'])

        await update.message.reply_text(f"‚úÖ *–ö–ª–∞–≤–∏—à–∞ *`{key_input}`* –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞.*", parse_mode='MARKDOWN')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à–∏ {key_input}: {e}")
        await update.message.reply_text(f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à–∏ '{key_input}'.* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", parse_mode='MARKDOWN')
        return ASK_KEY

    return ConversationHandler.END
async def sleep_computer(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("*üí§ –ü–µ—Ä–µ–≤–æ–∂—É –∫–æ–º–ø—å—é—Ç–µ—Ä –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...*", parse_mode='MARKDOWN')
    subprocess.run(["rundll32.exe", "powrprof.dll,SetSuspendState", "0", "1", "0"])

def check_speed():
    try:
        st = speedtest.Speedtest()
        best_server = st.get_best_server()  # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        st.download()
        st.upload()
        res = st.results.dict()
        download_speed = res['download'] / 1_000_000  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Mbps
        upload_speed = res['upload'] / 1_000_000  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Mbps
        ping = res['ping']
        server_name = best_server['sponsor']
        server_location = best_server['name']
        server_country = best_server['country']
        return (f"üí´ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–ø–∏–¥—Ç–µ—Å—Ç–∞:* \n\n"
                f"‚¨áÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: *{download_speed:.2f} Mbps*\n"
                f"‚¨ÜÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: *{upload_speed:.2f} Mbps*\n"
                f"üõú –ü–∏–Ω–≥: *{ping} ms*\n"
                f"üìç –°–µ—Ä–≤–µ—Ä: *{server_name}, {server_location}, {server_country}*")
    except speedtest.ConfigRetrievalError as e:
        return f"‚ùå *–û—à–∏–±–∫–∞:* –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. {e}"
    except speedtest.NoMatchedServers:
        return "‚ùå *–û—à–∏–±–∫–∞:* –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except speedtest.SpeedtestBestServerFailure:
        return "‚ùå *–û—à–∏–±–∫–∞:* –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except speedtest.SpeedtestException as e:
        return f"‚ùå *–û—à–∏–±–∫–∞:* –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∫–æ—Ä–æ—Å—Ç–∏: {e}"
    except Exception as e:
        return f"‚ùå *–û—à–∏–±–∫–∞:* –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∫–æ—Ä–æ—Å—Ç–∏: {e}"

async def volume_up(update, context):
    # –ù–∞–∂–∏–º–∞–µ–º –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
    pyautogui.press('volumeup', presses=5)
    await update.callback_query.message.reply_text("*üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 10%.*", parse_mode='MARKDOWN')

async def volume_down(update, context):
    # –ù–∞–∂–∏–º–∞–µ–º –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
    pyautogui.press('volumedown', presses=5)
    await update.callback_query.message.reply_text("*üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ 10%.*", parse_mode='MARKDOWN')

async def screenshot(update: Update, context: CallbackContext) -> None:
    with mss.mss() as sct:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–æ–≤
        monitors = sct.monitors[1:]  # sct.monitors[0] - —ç—Ç–æ –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä—ã –≤–º–µ—Å—Ç–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã
        
        media_group = []
        
        for i, monitor in enumerate(monitors):
            # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
            screenshot = sct.grab(monitor)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
            img = Image.frombytes('RGB', (screenshot.width, screenshot.height), screenshot.rgb)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
            bio = io.BytesIO()
            bio.name = f'screenshot_{i+1}.png'
            img.save(bio, 'PNG')
            bio.seek(0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫ –≤ —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞
            media_group.append(InputMediaPhoto(bio))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        await context.bot.send_media_group(chat_id=update.callback_query.message.chat_id, media=media_group)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ—ë –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
async def receive_url(update: Update, context: CallbackContext) -> int:
    url = update.message.text
    # –û—Ç–∫—Ä—ã—Ç–∏–µ URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    webbrowser.open(url)
    await update.message.reply_text(f'*‚úÖ –°—Å—ã–ª–∫–∞ {url} –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.*', parse_mode='MARKDOWN', disable_web_page_preview=True)

    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–≤—É–∫–∞ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
async def record_microphone(update: Update, context: CallbackContext) -> None:
    CHUNK = 1024
    FORMAT = pyaudio.paInt16
    CHANNELS = 1
    RATE = 44100
    RECORD_SECONDS = 15
    WAVE_OUTPUT_FILENAME = os.path.join(output_folder, "output_microphone.wav")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ—ë
    os.makedirs(output_folder, exist_ok=True)

    p = pyaudio.PyAudio()

    stream = p.open(format=FORMAT,
                    channels=CHANNELS,
                    rate=RATE,
                    input=True,
                    frames_per_buffer=CHUNK)

    frames = []

    for _ in range(0, int(RATE / CHUNK * RECORD_SECONDS)):
        data = stream.read(CHUNK)
        frames.append(data)

    stream.stop_stream()
    stream.close()
    p.terminate()

    wf = wave.open(WAVE_OUTPUT_FILENAME, 'wb')
    wf.setnchannels(CHANNELS)
    wf.setsampwidth(p.get_sample_size(FORMAT))
    wf.setframerate(RATE)
    wf.writeframes(b''.join(frames))
    wf.close()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –≤ Telegram –≤ –≤–∏–¥–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    with open(WAVE_OUTPUT_FILENAME, 'rb') as audio:
        await context.bot.send_voice(chat_id=update.callback_query.message.chat_id, voice=audio)

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    os.remove(WAVE_OUTPUT_FILENAME)

async def record_screen(update: Update, context: CallbackContext) -> None:
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    RECORD_SECONDS = 15

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ output, –∏ –µ—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    # –ó–∞–¥–∞–π—Ç–µ –∏–º—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    TEMP_VIDEO_FILENAME = os.path.join(output_folder, "temp_screen_record.mp4").replace('\\', '/')

    # –ü–æ–ª—É—á–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
    screen_width, screen_height = ImageGrab.grab().size
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ
    resolution = (screen_width, screen_height)

    # –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç VideoWriter –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')  # –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP4
    out = cv2.VideoWriter(TEMP_VIDEO_FILENAME, fourcc, 15.0, resolution)

    start_time = time.time()

    while (time.time() - start_time) < RECORD_SECONDS:
        # –ó–∞—Ö–≤–∞—Ç–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
        img = ImageGrab.grab()
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤ numpy
        frame = np.array(img)
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ BGR –≤ RGB
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        # –ó–∞–ø–∏—à–∏—Ç–µ –∫–∞–¥—Ä
        out.write(frame)

    # –û—Å–≤–æ–±–æ–¥–∏—Ç–µ –æ–±—ä–µ–∫—Ç VideoWriter
    out.release()

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –≤ Telegram –∫–∞–∫ –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—å
    try:
        with open(TEMP_VIDEO_FILENAME, 'rb') as video:
            await context.bot.send_video(chat_id=update.callback_query.message.chat_id, video=video, supports_streaming=True)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –≤ Telegram:", e)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ–º
    if os.path.exists(TEMP_VIDEO_FILENAME):
        os.remove(TEMP_VIDEO_FILENAME)
    else:
        print("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω.")

async def clear_cart(update: Update, context: CallbackContext) -> None:
    try:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
        SHERB_NOCONFIRMATION = 0x00000001
        SHERB_NOPROGRESSUI = 0x00000002
        SHERB_NOSOUND = 0x00000004

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ SHEmptyRecycleBin
        result = ctypes.windll.shell32.SHEmptyRecycleBinW(None, None, SHERB_NOCONFIRMATION | SHERB_NOPROGRESSUI | SHERB_NOSOUND)

        if result == 0:
            message = await context.bot.send_message(chat_id=update.callback_query.message.chat_id, text='‚úÖ *–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞*', parse_mode='MARKDOWN')
        elif result == -2147418113:
            message = await context.bot.send_message(chat_id=update.callback_query.message.chat_id, text='ü§ñ *–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞*', parse_mode='MARKDOWN')
        else:
            message = await context.bot.send_message(chat_id=update.callback_query.message.chat_id, text=f'‚ùå *–û—à–∏–±–∫–∞*: –∫–æ–¥ –æ—à–∏–±–∫–∏ {result}', parse_mode='MARKDOWN')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ user_data
        context.user_data['clear_cart_message_id'] = message.message_id
        
    except Exception as e:
        await context.bot.send_message(chat_id=update.callback_query.message.chat_id, text=f'‚ùå *–û—à–∏–±–∫–∞*: {str(e)}')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏
async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text('*‚ùå –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.*', parse_mode='MARKDOWN')
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reboot
async def reboot(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id in TGID:
        time_args = context.args
        if len(time_args) != 3:
            await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reboot 1h 59m 59s", parse_mode='MARKDOWN')
            return

        try:
            hours = int(time_args[0].replace('h', '')) * 3600
            minutes = int(time_args[1].replace('m', '')) * 60
            seconds = int(time_args[2].replace('s', ''))
            total_seconds = hours + minutes + seconds
        except ValueError:
            await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reboot 1h 59m 59s", parse_mode='MARKDOWN')
            return

        new_timer = Timer(total_seconds, os.system, ["shutdown -r -t 1"])
        new_timer.start()

        if user_id not in user_timers:
            user_timers[user_id] = []
        user_timers[user_id].append(new_timer)

        await update.message.reply_text(f"*‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ {total_seconds} —Å–µ–∫—É–Ω–¥*", parse_mode='MARKDOWN')
    else:
        await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", parse_mode='MARKDOWN')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop
async def stop(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id in TGID:
        time_args = context.args
        if len(time_args) != 3:
            await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop 1h 59m 59s", parse_mode='MARKDOWN')
            return

        try:
            hours = int(time_args[0].replace('h', '')) * 3600
            minutes = int(time_args[1].replace('m', '')) * 60
            seconds = int(time_args[2].replace('s', ''))
            total_seconds = hours + minutes + seconds
        except ValueError:
            await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop 1h 59m 59s", parse_mode='MARKDOWN')
            return

        new_timer = Timer(total_seconds, os.system, ["shutdown -s -t 1"])
        new_timer.start()

        if user_id not in user_timers:
            user_timers[user_id] = []
        user_timers[user_id].append(new_timer)

        await update.message.reply_text(f"*‚úÖ –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ {total_seconds} —Å–µ–∫—É–Ω–¥*", parse_mode='MARKDOWN')
    else:
        await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", parse_mode='MARKDOWN')

async def add_custom_action(update, context):
    await update.message.reply_text("*‚ú® –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è:*", parse_mode='MARKDOWN')
    return ENTER_ACTION_NAME

async def receive_action_name(update, context):
    action_name = update.message.text
    context.user_data['action_name'] = action_name
    await update.message.reply_text("*‚ú® –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Ç—å –∫ —è—Ä–ª—ã–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (.lnk):*", parse_mode='MARKDOWN')
    return ENTER_APP_PATH

async def receive_app_path(update, context):
    action_name = context.user_data['action_name']
    app_path = update.message.text
    custom_actions[action_name] = app_path
    save_custom_actions()
    await update.message.reply_text(f"*‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ '{action_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.*", parse_mode='MARKDOWN')
    return ConversationHandler.END

async def undo(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id in TGID:
        os.system("shutdown /a")  # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if user_id in user_timers:
            for timer in user_timers[user_id]:
                timer.cancel()  # –û—Ç–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∞–π–º–µ—Ä
            user_timers[user_id] = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º–µ—Ä–æ–≤
        await update.message.reply_text("*‚úÖ –í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã*", parse_mode='MARKDOWN')
    else:
        await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", parse_mode='MARKDOWN')

async def sleep(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id in TGID:
        time_args = context.args
        if len(time_args) != 3:
            await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sleep 1h 59m 59s", parse_mode='MARKDOWN')
            return

        if time_args[0] != '/t':
            await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞.", parse_mode='MARKDOWN')
            return

        try:
            hours = int(time_args[1].replace('h', '')) * 3600
            minutes = int(time_args[2].replace('m', '')) * 60
            seconds = int(time_args[3].replace('s', ''))
            total_seconds = hours + minutes + seconds
        except ValueError:
            await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sleep 1h 59m 59s", parse_mode='MARKDOWN')
            return

        new_timer = Timer(total_seconds, os.system, [f"shutdown /h /t {total_seconds}"])
        new_timer.start()

        if user_id not in user_timers:
            user_timers[user_id] = []
        user_timers[user_id].append(new_timer)

        await update.message.reply_text(f"*‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ {total_seconds} —Å–µ–∫—É–Ω–¥*", parse_mode='MARKDOWN')
    else:
        await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", parse_mode='MARKDOWN')

def save_custom_actions():
    with open(custom_actions_file, 'w') as file:
        json.dump(custom_actions, file)

async def schedule_app(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    if user_id in TGID:
        args = context.args
        if len(args) < 4:
            await update.message.reply_text(
                "‚ùå *–û—à–∏–±–∫–∞:* –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /timer <app\_path> <hours>h <minutes>m <seconds>s",
                parse_mode='Markdown'
            )
            return

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ—Ö –≤ –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        app_path = ' '.join(args[:-3])
        time_args = args[-3:]

        try:
            hours = int(time_args[0].replace('h', '')) * 3600
            minutes = int(time_args[1].replace('m', '')) * 60
            seconds = int(time_args[2].replace('s', ''))
            total_seconds = hours + minutes + seconds
        except ValueError:
            await update.message.reply_text(
                "‚ùå *–û—à–∏–±–∫–∞:* –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /timer <app\_path> <hours>h <minutes>m <seconds>s",
                parse_mode='Markdown'
            )
            return

        async def run_app():
            try:
                if os.path.exists(app_path):
                    if app_path.endswith('.exe'):
                        subprocess.Popen(app_path)
                    else:
                        os.startfile(app_path)
                else:
                    await update.message.reply_text(
                        f"‚ùå *–û—à–∏–±–∫–∞:* –§–∞–π–ª `{app_path}` –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        parse_mode='Markdown'
                    )
            except Exception as e:
                await update.message.reply_text(
                    f"‚ùå *–û—à–∏–±–∫–∞:* –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª `{app_path}`. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {str(e)}",
                    parse_mode='Markdown'
                )

        def run_coroutine():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(run_app())
            loop.close()

        new_timer = threading.Timer(total_seconds, run_coroutine)
        new_timer.start()

        if user_id not in app_timers:
            app_timers[user_id] = []
        app_timers[user_id].append(new_timer)

        await update.message.reply_text(
            f"*‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ* `{app_path}` *–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∫ –∑–∞–ø—É—Å–∫—É —á–µ—Ä–µ–∑* `{total_seconds}` *—Å–µ–∫—É–Ω–¥*",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", parse_mode='Markdown')

def startup():
    logging.debug("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    print(centered_ascii_art)
    play_startup_sound()

startup()

async def send_start_to_all(app: Application) -> None:
    for user_id in TGID:
        try:
            # –°–æ–∑–¥–∞–µ–º "—Ñ–µ–π–∫–æ–≤—ã–π" –æ–±—ä–µ–∫—Ç Message
            fake_message = Message(
                message_id=0,
                date=datetime.now,
                chat=Chat(id=user_id, type='private'),
                from_user=User(id=user_id, is_bot=False, first_name='User'),
                text='/start'
            )

            # –°–æ–∑–¥–∞–µ–º "—Ñ–µ–π–∫–æ–≤—ã–π" –æ–±—ä–µ–∫—Ç Update
            fake_update = Update(
                update_id=0,
                message=fake_message
            )

            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é start —Å "—Ñ–µ–π–∫–æ–≤—ã–º" –æ–±—ä–µ–∫—Ç–æ–º Update
            await start(fake_update, CallbackContext(app))
        except Exception as e:
            logging.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def commands(app:Application) -> None:
    await app.bot.set_my_commands([
        BotCommand("start", "üê¨ –ú–µ–Ω—é"),
        BotCommand("addaction", "‚ú® –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
        BotCommand("timer", "‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
        BotCommand("stop", "‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ "),
        BotCommand("reboot", "‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"),
        BotCommand("sleep", "‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"),
        BotCommand("undo", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
    ])

def main() -> None:
    try:

        app = Application.builder().token(TOKEN).build()

        # –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        app.add_handler(CommandHandler('start', start))

        app.job_queue.run_once(send_start_to_all, 0)
        app.job_queue.run_once(commands, 0)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(button, pattern='^open_url$')],
            states={
                ENTER_URL: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_url)],
                RECORD_MICROPHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, record_microphone)]
            },
            fallbacks=[CommandHandler('cancel', cancel)],
        )

        # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        add_custom_action_handler = ConversationHandler(
            entry_points=[CommandHandler('addaction', add_custom_action)],
            states={
                ENTER_ACTION_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_action_name)],
                ENTER_APP_PATH: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_app_path)],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
        )

        keyboard_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(button)],
            states={
                ASK_KEY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_key)],
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )

        text_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(button, pattern='^input_text$')],
            states={
                ENTER_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_text)],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
        )

        files_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(start_browsing, pattern='^browse$')],
            states={
                BROWSING: [CallbackQueryHandler(button)]
            },
            fallbacks=[]
        )

        app.add_handler(files_handler)
        app.add_handler(text_handler)
        app.add_handler(add_custom_action_handler)
        app.add_handler(conv_handler)
        app.add_handler(keyboard_handler)
        app.add_handler(CallbackQueryHandler(button))
        app.add_handler(CommandHandler('timer', schedule_app))

        # –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ /reboot, /stop –∏ /undo
        reboot_handler = CommandHandler('reboot', reboot)
        app.add_handler(reboot_handler)

        stop_handler = CommandHandler('stop', stop)
        app.add_handler(stop_handler)

        sleep_handler = CommandHandler('sleep', sleep)
        app.add_handler(sleep_handler)

        undo_handler = CommandHandler('undo', undo)
        app.add_handler(undo_handler)

    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ (def main): {e}")

    app.run_polling()

if __name__ == '__main__':
    main()